import tkinter as tk
from tkinter import messagebox
import random

class Cell:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —è—á–µ–π–∫—É –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ."""
    def __init__(self, master, x, y):
        self.master = master
        self.x = x
        self.y = y
        self.is_mine = False
        self.is_open = False
        self.is_flagged = False
        self.button = tk.Button(master, width=2, height=1, command=self.open_cell)
        self.button.bind('<Control-Button-1>', self.toggle_flag)
        self.button.grid(row=y, column=x)

    def open_cell(self):
        """–û—Ç–∫—Ä—ã—Ç—å —è—á–µ–π–∫—É."""
        if self.is_open or self.is_flagged:
            return
        if not self.master.mines_placed:
            self.master.place_mines(self.x, self.y)
        self.is_open = True
        if self.is_mine:
            self.button.config(text="üí£", bg="red")
            self.master.game_over(False)
        else:
            self.button.config(relief=tk.SUNKEN)
            mines_around = self.master.count_mines_around(self.x, self.y)
            if mines_around > 0:
                self.button.config(text=str(mines_around))
            else:
                self.button.config(bg="lightgrey")
                self.master.open_adjacent_cells(self.x, self.y)
            self.master.check_win()

    def toggle_flag(self, event):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —Ñ–ª–∞–≥ –Ω–∞ —è—á–µ–π–∫–µ."""
        if not self.is_open:
            if not self.is_flagged:
                if self.master.flag_count < self.master.mines:
                    self.is_flagged = not self.is_flagged
                    self.master.flag_count += 1
                    self.button.config(text="üö©")
            else:
                self.is_flagged = not self.is_flagged
                self.master.flag_count -= 1
                self.button.config(text="")




class MinesweeperGame(tk.Frame):
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–≥—Ä—É –°–∞–ø—ë—Ä."""
    def __init__(self, master, rows=10, columns=10, mines=10):
        super().__init__(master)
        self.master = master
        self.rows = rows
        self.columns = columns
        self.mines = mines
        self.flag_count = 0
        self.cells = []
        self.mine_positions = []
        self.mines_placed = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —Ä–∞–∑–º–µ—â–µ–Ω—ã –ª–∏ –º–∏–Ω—ã
        self.init_game()
        self.master.bind('<Key>', self.handle_key)

    def init_game(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
        self.pack()
        self.master.title("–°–∞–ø—ë—Ä")
        self.create_board()

    def create_board(self):
        """–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ."""
        for y in range(self.rows):
            row = []
            for x in range(self.columns):
                cell = Cell(self, x, y)
                row.append(cell)
            self.cells.append(row)

    def place_mines(self, exclude_x, exclude_y):
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –º–∏–Ω—ã –Ω–∞ –ø–æ–ª–µ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–≤—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É –∏ –µ—ë —Å–æ—Å–µ–¥–µ–π."""
        # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –º–∏–Ω, –∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É –∏ –µ—ë —Å–æ—Å–µ–¥–µ–π
        possible_positions = [
            (x, y) for x in range(self.columns) for y in range(self.rows)
            if (x, y) not in [(exclude_x + dx, exclude_y + dy)
                              for dx in [-1, 0, 1] for dy in [-1, 0, 1]
                              if 0 <= exclude_x + dx < self.columns and 0 <= exclude_y + dy < self.rows]
        ]
        self.mine_positions = random.sample(possible_positions, self.mines)
        for x, y in self.mine_positions:
            self.cells[y][x].is_mine = True
        self.mines_placed = True

    def count_mines_around(self, x, y):
        """–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏."""
        count = 0
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.columns and 0 <= ny < self.rows and self.cells[ny][nx].is_mine:
                    count += 1
        return count

    def open_adjacent_cells(self, x, y):
        """–û—Ç–∫—Ä—ã—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏, –µ—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç –º–∏–Ω."""
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.columns and 0 <= ny < self.rows:
                    cell = self.cells[ny][nx]
                    if not cell.is_open and not cell.is_mine:
                        cell.open_cell()

    def check_win(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ –ø–æ–±–µ–¥–∞."""
        for row in self.cells:
            for cell in row:
                if not cell.is_mine and not cell.is_open:
                    return
        self.game_over(True)

    def game_over(self, win):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã."""
        for x, y in self.mine_positions:
            self.cells[y][x].button.config(text="üí£", bg="grey" if win else "red")
        messagebox.showinfo("–°–∞–ø—ë—Ä", "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!" if win else "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
        self.master.destroy()

    def handle_key(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à."""
        print(f"Key pressed: {event}")  # –í—ã–≤–æ–¥–∏–º –Ω–∞–∂–∞—Ç—É—é –∫–ª–∞–≤–∏—à—É



def main():
    root = tk.Tk()
    MinesweeperGame(root, rows=10, columns=10, mines=15)
    root.mainloop()

if __name__ == "__main__":
    main()
